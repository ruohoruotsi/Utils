
# Install ffmpeg using brew correctly
$ brew install ffmpeg $(brew options ffmpeg --compact)

##################################################################################################
# Decode a folder of AAC bitstreams in parallel (5 cores) over a time 
# range (0,3000) seconds, downmixing to mono and sample-rate converting to 16kHz
$ ls *.m4a | xargs -P 5 -I % ffmpeg -ss 0 -to 3000  -i % -ac 1 -ar 16000 %.wav

# Similarly, just convert the sample rate, using 5 cores
$ $ find . -name "*.wav" |  xargs -P 5 -I % ffmpeg -i %  -ar 16000 %.16k.wav

# Decode AAC, but different time-ranges (900,1800) and rename file more descriptively
$ ls *.wav | xargs -P 5 -I % ffmpeg -ss 900 -to 1800  -i % -ac 1 %.trim.mono.wav

# Transcode nasty .wma audio from an ancient Dell
$ for file in *.wma; do ffmpeg -i "${file}"  -acodec libmp3lame -ab 192k "${file/.wma/.mp3}"; done

# Decode files from YouTube playlist to mono LPCM @ 16kHz WAV, suitable for training & labeling
$ for file in *.wav; do sox -- "${file}" -r 16k ./mono/"${file%.*}.mono.16k.wav" remix 1,2; done

# Segment a larger file into smaller ones of fixed size (5 seconds) by providing the segment times
# and a file pattern, do this for all WAV files in a directory. Good for music, or environmental sounds
# which are not sensitive to, say speech structure and require a VAD
$ for file in *.wav; do ffmpeg -i "${file}" -c copy -f segment -segment_times 5,10,15,20,25 "${file}_%d.wav"; done

##################################################################################################

# Demux video from audio, with a weird/invalid name (so specifiy '--' to indicate end-of-options)
$ ffmpeg -i -5KQ66BBWC4.mkv -vn -- out.wav

# Demux video from audio, splitting each audio stream into a separate file with map
$ ffmpeg -i input.mov -vn \
  -map 0:0 -c copy wav0.wav \
  -map 0:1 -c copy wav1.wav \
  -map 0:2 -c copy wav2.wav \
  -map 0:3 -c copy wav3.wav \
  -map 0:4 -c copy wav4.wav \
  -map 0:5 -c copy wav5.wav \
  -map 0:6 -c copy wav6.wav \
  -map 0:7 -c copy wav7.wav


##################################################################################################
# SUMMING AUDIO IN A DIRECTORY
##################################################################################################

# Sum audio durations in current dir (and below) in H:m:s, using sox --> good for a small # files
$ soxi -D *.wav | awk '{SUM += $1} END { printf "%d:%d:%d\n",SUM/3600,SUM%3600/60,SUM%60}'

# Sum audio durations in current dir (and below) in H:m:s, using sox --> good for VERY BIG dirs
find . -name "*.wav" -exec soxi -D {} \; | awk '{SUM += $1} END { printf "%d:%d:%d\n",SUM/3600,SUM%3600/60,SUM%60}'

# Sum length of encoded (.m4a) audio in the current dir, in seconds, using ffmpeg
find . -maxdepth 1 -iname '*.m4a' -exec ffprobe -v quiet -of csv=p=0 -show_entries format=duration {} \; | paste -sd+ -| bc


##################################################################################################

# Extract the center channel from a 5.1 channel file <--- this is just one dodgy way, that perhaps uses pan?
ls *_5.1ch.wav | xargs -P 5 -I % ffmpeg -i % -map_channel 0.0.2  %.center.wav

# 3 different ways to extract the center channel
ffmpeg -i input.wav -af "pan=mono|c0=c2" center.wav
ffmpeg -i in.wav -map_channel 0.0.2 center.wav
ffmpeg -i in.wav -filter_complex 'channelsplit=channel_layout=5.1:channels=FC[FC]' -map '[FC]' center.wav


# randomly select 8 audio files and copy them elsewhere: uniform sampling baby! 
shuf -zn8 -e *.wav |  xargs -0 cp -vt /target/directory/here

# good if copy file list is short enough
cp `find . -name "*.wav" | shuf -n8` .. 

# The overall winner for REALLY big file dirs 
find . -name "*.wav" | shuf -n8 |  xargs -d '\n' cp -vt .. works best


##################################################################################################
# Video do upscaling - mafonso's command line: 
ffmpeg -i sintel_trailer-480p.mp4 -sws_flags lanczos+accurate_rnd+print_info -strict -1 -s:v 1920x1080 sintel_1080p.mp4

# -y to overwrite file, -pix_fmt to make it Quicktime compatible, -acodec copy to leave audio alone
ffmpeg -y -i Ruoho_Ruotsi_Pour_Autant.mov  -sws_flags lanczos+accurate_rnd+print_info -strict -1 -s:v 1920x1080 -pix_fmt yuv420p -acodec copy sintel_1080p.mov

# -y to overwrite file, -pix_fmt to make it Quicktime compatible, -acodec copy to leave audio alone + de-interlacing filter
ffmpeg -y -i Ruoho_Ruotsi_Pour_Autant.mov  -sws_flags lanczos+accurate_rnd+print_info -strict -1 -s:v 1920x1080 -pix_fmt yuv420p -acodec copy -vf yadif -c:v libx264 -preset slow -crf 19  sintel_1080p.mov

# allegedly upscale (no lanczos) and letterbox:
ffmpeg -i input.mp4 -vf "scale=(iw*sar)*min(1280/(iw*sar)\,720/ih):ih*min(1280/(iw*sar)\,720/ih), pad=1280:720:(1280-iw*min(1280/iw\,720/ih))/2:(720-ih*min(1280/iw\,720/ih))/2" output.mp4



##################################################################################################
# Convert a Plex style TV Show directory tree of MKVs, but remap to excise the first audio stream (0:1) while
# keeping the second (0:2) as well as the subtitles
$ for i in */*.mkv;    do ffmpeg -i "$i"  -map 0:0 -map 0:2 -map 0:4? -acodec copy -vcodec copy "${i##*/}"; done

##################################################################################################

# Convert files from YouTube were converted to mono 16kHz WAV with
$ for file in *.wav; do sox -- "${file}" -r 16k ./mono/"${file%.*}.mono.16k.wav" remix 1,2; done
